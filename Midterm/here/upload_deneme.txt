                    {
                        send_response(SUCCESS, file_content, client_fd, request.client_pid);
                        free(file_content);
                    } 
                    else 
                    {
                        send_response(FAILURE, "Error reading file\n", client_fd, request.client_pid);
                    }
                break;
            case WRITE_FILE:
                    snprintf(log, sizeof(log), "Client %d requested to write to file %s.\n", request.client_pid, request.command.filename);
                    log_message(log);
                    if (write_to_file(request.command.filename, request.command.line, request.command.data) == 0) 
                    {
                        send_response(SUCCESS, "File written successfully\n", client_fd, request.client_pid);
                    } 
                    else 
                    {
                        send_response(FAILURE, "Error writing to file\n", client_fd, request.client_pid);
                    }
                break;
            case UPLOAD:
                    snprintf(log, sizeof(log), "Client %d requested to upload file %s.\n", request.client_pid, request.command.filename);
                    log_message(log);
                    printf("client dir: %s\n", request.command.data);
                    printf("dirname: %s\n", dirname);
                    if (upload_file(request.command.filename, request.command.data, dirname) == 0) 
                    {
                        send_response(SUCCESS, "File uploaded successfully\n", client_fd, request.client_pid);
                    } 
                    else 
                    {
                        send_response(FAILURE, "Error uploading file\n", client_fd, request.client_pid);
                    }
                break;
            case DOWNLOAD:
                    snprintf(log, sizeof(log), "Client %d requested to download file %s.\n", request.client_pid, request.command.filename);
                    log_message(log);
                    if (download_file(request.command.filename, dirname) == 0) 
                    {
                        send_response(SUCCESS, "File downloaded successfully\n", client_fd, request.client_pid);
                    } 
                    else 
                    {
                        send_response(FAILURE, "Error downloading file\n", client_fd, request.client_pid);
                    }
                break;
            case ARCHIVE_SERVER:
                    snprintf(log, sizeof(log), "Client %d requested to archive server.\n", request.client_pid);
                    log_message(log);
                    status = archive_server(request.command.filename, request.command.data);
                    if (status == 0) 
                    {
                        send_response(SUCCESS, "Server archived successfully.\n", client_fd, request.client_pid);
                    } 
                    else if(status == -1)
                    {
                        send_response(FAILURE, "Error archiving server.\n", client_fd, request.client_pid);
                    }
                    else if(status == -2)
                    {
                        send_response(FAILURE, "Error archiving server. Child process terminated abnormally.\n", client_fd, request.client_pid);
                    }
                break;
            case QUIT:
                snprintf(log, sizeof(log), "Client %d killed.\n", request.client_pid);
                log_message(log);
                kill(request.client_pid, SIGKILL);
                break;
            default:
                break;
